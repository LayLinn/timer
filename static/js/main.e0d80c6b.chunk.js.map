{"version":3,"sources":["timer.js","App.js","serviceWorker.js","index.js"],"names":["timer","_ref","hours","minutes","seconds","react_default","a","createElement","App","state","isOn","handleClickToggle","_this","setState","handleClickReset","saveToLocalStorage","localStorage","setItem","JSON","stringify","timerStr","getItem","parse","this","_this2","interval","setInterval","window","addEventListener","bind","clearInterval","removeEventListener","class","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEeA,EAAA,SAAAC,GAA+B,IAA7BC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,QAASC,EAAaH,EAAbG,QAC7B,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACKL,GAAO,GAAKA,EAAQ,IAAMA,EAD/B,IAEKC,GAAS,GAAKA,EAAU,IAAMA,EAFnC,IAGKC,GAAS,GAAKA,EAAU,IAAMA,KCmFhCI,oNAtFXC,MAAQ,CACRL,QAAU,EACVD,QAAU,EACVD,MAAQ,EACRQ,MAAO,KA2CXC,kBAAoB,WAChBC,EAAKC,SAAS,CAACH,MAAQE,EAAKH,MAAMC,UAGtCI,iBAAmB,WACfF,EAAKC,SAAS,CACVT,QAAU,EACVD,QAAU,EACVD,MAAQ,EACRQ,MAAO,OAIfK,mBAAqB,WACjBC,aAAaC,QACT,QACAC,KAAKC,UAAU,CACXjB,MAAQU,EAAKH,MAAMP,MACnBC,QAAUS,EAAKH,MAAMN,QACrBC,QAAUQ,EAAKH,MAAML,gGA1D7B,IAAMgB,EAAWJ,aAAaK,QAAQ,SACtC,GAAe,MAAZD,EAAiB,CAChB,IAAMpB,EAAQkB,KAAKI,MAAMF,GACzBG,KAAKV,SAAS,CACVX,MAAQF,EAAME,MACdC,QAAUH,EAAMG,QAChBC,QAAUJ,EAAMI,uDAKR,IAAAoB,EAAAD,KAChBA,KAAKE,SAAWC,YAAY,WACzBF,EAAKf,MAAMC,OACc,KAArBc,EAAKf,MAAML,SACVoB,EAAKX,SAAS,CAACV,QAAUqB,EAAKf,MAAMN,QAAS,EAAGC,QAAU,IAEtC,KAArBoB,EAAKf,MAAMN,QACVqB,EAAKX,SAAS,CAACX,MAAQsB,EAAKf,MAAMP,MAAO,EAAGC,QAAU,IAEtDqB,EAAKX,SAAS,CAACT,QAAUoB,EAAKf,MAAML,QAAS,MAGnD,KAEFuB,OAAOC,iBACH,eACAL,KAAKR,mBAAmBc,KAAKN,sDAKjCO,cAAcP,KAAKE,UACnBE,OAAOI,oBACH,eACAR,KAAKR,mBAAmBc,KAAKN,wCA6BjC,OACQlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACP,EAAD,CACAE,MAAOqB,KAAKd,MAAMP,MAClBC,QAASoB,KAAKd,MAAMN,QACpBC,QAASmB,KAAKd,MAAML,QACpB4B,MAAM,UACN3B,EAAAC,EAAAC,cAAA,UAAQ0B,QAASV,KAAKZ,kBAAmBqB,MAAM,mBAA/C,UACA3B,EAAAC,EAAAC,cAAA,UAAQ0B,QAASV,KAAKT,kBAAtB,iBAjFEoB,cCQEC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0d80c6b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({hours, minutes, seconds}) => {\n    return(\n        <div>\n            <h1>\n                {hours>=10 ? hours : '0' + hours}:\n                {minutes>=10 ? minutes : '0' + minutes}:\n                {seconds>=10 ? seconds : '0' + seconds}\n            </h1>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport Timer from './timer';\nimport './App.css';\n\nclass App extends Component{\n    state = {\n    seconds : 0,\n    minutes : 0,\n    hours : 0,\n    isOn : false\n    }\n\ncomponentWillMount() {\n    const timerStr = localStorage.getItem('timer');\n    if(timerStr != null){\n        const timer = JSON.parse(timerStr);\n        this.setState({\n            hours : timer.hours,\n            minutes : timer.minutes,\n            seconds : timer.seconds\n        })\n    }\n}\n\ncomponentDidMount() {\n    this.interval = setInterval(() => {\n    if(this.state.isOn){\n        if(this.state.seconds===59){\n            this.setState({minutes : this.state.minutes +1, seconds : 0})\n        }\n        if(this.state.minutes===59){\n            this.setState({hours : this.state.hours +1, minutes : 0})\n        } else{\n            this.setState({seconds : this.state.seconds +1})\n        }\n    }\n    },1000)\n\n    window.addEventListener(\n        'beforeunload',\n        this.saveToLocalStorage.bind(this)\n    );\n}\n\ncomponentWillUnmount() {\n    clearInterval(this.interval);\n    window.removeEventListener(\n        'beforeunload',\n        this.saveToLocalStorage.bind(this)\n    );\n}\n\nhandleClickToggle = () => {\n    this.setState({isOn : !this.state.isOn})\n}\n\nhandleClickReset = () => {\n    this.setState({\n        seconds : 0,\n        minutes : 0,\n        hours : 0,\n        isOn : false\n    });\n};\n\nsaveToLocalStorage = () => {\n    localStorage.setItem(\n        \"timer\", \n        JSON.stringify({\n            hours : this.state.hours,\n            minutes : this.state.minutes,\n            seconds : this.state.seconds\n        })\n    );\n};\n\nrender(){\n    return(\n            <div>\n                <Timer \n                hours={this.state.hours} \n                minutes={this.state.minutes} \n                seconds={this.state.seconds} \n                class=\"timer\"/>\n                <button onClick={this.handleClickToggle} class=\"btn btn-primary\">Toggle</button>\n                <button onClick={this.handleClickReset}>Reset</button>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}